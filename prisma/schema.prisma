// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)

  accounts      Account[]
  sessions      Session[]
  employee      Employee?
  headOfDepartment Department?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Employee {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Personal Information
  firstName       String
  lastName        String
  phoneNumber     String?
  dateOfBirth     DateTime?

  // Job Information
  departmentId    String?
  department      Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  position        String
  employeeId      String   @unique
  joinDate        DateTime

  // Address
  address         String?
  city            String?
  state           String?
  zipCode         String?
  country         String?

  // Emergency Contact
  emergencyContactName    String?
  emergencyContactPhone   String?
  emergencyContactRelation String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([employeeId])
  @@index([departmentId])
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  headId      String?  @unique
  head        User?    @relation(fields: [headId], references: [id], onDelete: SetNull)
  logo        String?
  description String?  @db.Text

  employees   Employee[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([headId])
}
